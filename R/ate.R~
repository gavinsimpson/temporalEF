##' Generate a set of asymmetric temporal eigenfunctions
##'
##' The asymmetric eigenvector map (AEM) is a recently proposed method
##' for describing orthongonal spatial functions for use in multivariate
##' ordination. AEMs are asymmetric because they apply a directionality
##' to the spatial dependencies modelled by the eigenfunctions.
##' Asymmetric temporal eigenfunctions (ATEs) implement the AEM idea to
##' model patterns of temporal dependence; i.e. a single spatial
##' dimension.
##'
##' @rdname ate
##'
##' @param x an R object. For \code{ate} currently only a sorted vector
##' of time points. For the \code{print} method an object of class
##' \code{"ate"}.
##' @param N numeric; the number of eigenvectors to return. If not
##' supplied, N is taken from the appropriate dimension of \code{x};
##' for the default method, this is the length of \code{x}.
##' @param weight logical; should a weighting matrix be generated and
##' applied to the link matrix?
##' @param FUN a function to be applied to the weighting matrix.
##' Ignored if \code{weight} is \code{FALSE}.
##' @param ... additional arguments passed to \code{FUN}.
##'
##' @export
##'
##' @examples
##' tp <- seq_len(10)
##' ate(tp)

`ate` <- function(x, ...) {
    UseMethod("ate")
}

##' @rdname ate
##'
##' @method ate default
##' @S3method ate default
`ate.default` <- function(x, N, weight = FALSE, FUN = NULL, ...) {
    links <- lmat <- makeLinks(x)
    w <- NULL
    if(weight) {
        w <- makeWeights(x, FUN = FUN, ...)
        lmat <- lmat * w
    }
    if(missing(N))
        N <- length(x)
    SVD <- svd(lmat, nu = N, nv = 0)
    lambda <- SVD$d^2
    ate <- SVD$u
    names(lambda) <- colnames(ate) <- paste("EF", seq_along(lambda),
                                            sep = "")
    rownames(ate) <- if(is.null(tnams <- names(x))) {
        paste("T", seq_len(nrow(ate)), sep = "")
    } else {
        tnams
    }
    retval <- list(vectors = ate, tp = x, weights = w, links = links,
                   lambda = lambda, FUN = FUN)
    class(retval) <- "ate"
    retval
}

##' @rdname ate
##'
##' @method print ate
##' @S3method print ate
##' @param digits numeric; number of digits to display in output.
`print.ate` <- function(x, digits = 3, ...) {
    cat("\n")
    writeLines(strwrap("Asymmetric Temporal Eigenfunctions"))
    writeLines(paste("No. of Eigenfunctions:", length(x$lambda)))
    writeLines("Eigenvalues:")
    print(x$lambda, digits = digits)
}

##' @rdname ate
##'
##' @param choices numeric; vector indicating which eigenfunctions
##' to return.
##'
##' @method scores ate
##' @export scores.ate
`scores.ate` <- function(x, choices, ...) {
    if(missing(choices)) {
        choices <- seq_len(ncol(x$vectors))
    }
    x$vectors[, choices]
}

##' @rdname ate
##'
##' @method eigenvals ate
##' @export eigenvals.ate
`eigenvals.ate` <- function(x, ...) {
    out <- x$lambda
    class(out) <- "eigenvals"
    out
}

##' Plot asymmetric temporal eigenfunctions
##'
##' @param x an object of class \code{"ate"}
##' @param pages numeric; the number of pages over which to spread
##' the plots of the individual eigenfunction
##' @param ylim numeric vector of limits for the y-axis
##' @param xlab,ylab x and y-axis labels
##' @param ask logical; should plotting be paused between pages?
##' @param ... additional arguments passed to \code{\link{plot}}
##'
##' @return A plot on the currently active device
##'
##' @seealso \code{\link{ate}} for creating ATE objects
##'
##' @keywords hplot
##'
##' @examples
##' tp <- seq_len(50)
##' mod <- ate(tp)
##' plot(mod, pages = 2)
##'
##' @method plot ate
##' @S3method plot ate
##'
`plot.ate` <- function(x, pages = 1, ylim, ylab = nams, xlab = "",
                       ask = FALSE, ...) {
    len <- length(x$lambda)
    np <- ceiling(len / pages)
    prc <- n2mfrow(np)
    op <- par(mar = c(3,4,1,1), ask = ask)
    on.exit(par(op))
    on.exit(layout(1), add = TRUE)
    layout(matrix(seq_len(prod(prc)), ncol = prc[2], nrow = prc[1]))
    nams <- colnames(x$vectors)
    if(missing(ylim))
        ylim <- range(x$vectors)
    for(i in seq_len(len)) {
        plot(x$tp, x$vectors[,i], type = "l", ylab = ylab[i], xlab = xlab,
             ylim = ylim, ...)
    }
    invisible(x)
}
